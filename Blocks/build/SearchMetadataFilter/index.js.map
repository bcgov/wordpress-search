{"version":3,"file":"index.js","mappings":"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;;;;;AC9LA;AACA;AACA;AACsD;;AAEtD;AACA;AACA;AAC0B;AACJ;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACAuF,oEAAiB,CAAE,yCAAyC,EAAE;EAC7DC,IAAI,EAAE5E,6CAAI;EACV6E,IAAI,EAAEA,CAAA,KAAM;AACb,CAAE,CAAC;;;;;;;;;;;ACrBH;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEjDA;UACA;UACA;UACA;UACA","sources":["webpack://wordpress-search-blocks/./src/SearchMetadataFilter/edit/index.js","webpack://wordpress-search-blocks/./src/SearchMetadataFilter/index.js","webpack://wordpress-search-blocks/./src/SearchMetadataFilter/style.scss","webpack://wordpress-search-blocks/external window [\"wp\",\"apiFetch\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"blockEditor\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"blocks\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"components\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"coreData\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"data\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"element\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"i18n\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"url\"]","webpack://wordpress-search-blocks/external window \"ReactJSXRuntime\"","webpack://wordpress-search-blocks/webpack/bootstrap","webpack://wordpress-search-blocks/webpack/runtime/chunk loaded","webpack://wordpress-search-blocks/webpack/runtime/compat get default export","webpack://wordpress-search-blocks/webpack/runtime/define property getters","webpack://wordpress-search-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://wordpress-search-blocks/webpack/runtime/make namespace object","webpack://wordpress-search-blocks/webpack/runtime/jsonp chunk loading","webpack://wordpress-search-blocks/webpack/before-startup","webpack://wordpress-search-blocks/webpack/startup","webpack://wordpress-search-blocks/webpack/after-startup"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { SelectControl, Placeholder, Spinner, PanelBody } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n// List of internal WordPress post types to exclude\nconst EXCLUDED_POST_TYPES = [\n    'attachment',\n    'wp_block',\n    'wp_template',\n    'wp_template_part',\n    'wp_navigation',\n    'wp_font_face',\n    'wp_font_family',\n    'menu_item',\n    'wp_global_styles',\n    'revision',\n    'customize_changeset',\n    'nav_menu_item',\n    'custom_css',\n    'oembed_cache'\n];\n\n// List of metadata fields to exclude\nconst EXCLUDED_METADATA_FIELDS = [\n    'document_file_id',\n    'document_file_name',\n    'document_file_size',\n    'document_file_type',\n    'document_file_url',\n    'footnotes',\n    'show_inpage_nav'\n];\n\nexport default function Edit({ attributes, setAttributes }) {\n    const { selectedMetadata } = attributes;\n    const [metadataOptions, setMetadataOptions] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // Fetch post types with expanded query\n    const { postTypes } = useSelect((select) => {\n        const types = select(coreStore).getPostTypes({\n            per_page: -1,\n        });\n        \n        const filteredTypes = types?.filter(type => {\n            const isExcluded = EXCLUDED_POST_TYPES.includes(type.slug);\n            const hasRestSupport = Boolean(type.rest_base) && Boolean(type.rest_namespace);\n            const hasCustomFields = type.supports?.['custom-fields'] === true;\n            \n            return !isExcluded && hasRestSupport && hasCustomFields;\n        });\n        \n        return { postTypes: filteredTypes };\n    }, []);\n\n    useEffect(() => {\n        async function fetchMetadataForPostTypes() {\n            if (!postTypes) {\n                return;\n            }\n\n            const options = new Set(); // Use Set to avoid duplicate metadata fields\n            \n            // Create promises for all post type API calls\n            const apiPromises = postTypes.map(async (postType) => {\n                try {\n                    // For other post types, use the standard REST API\n                    const apiPath = postType.rest_namespace === 'wp/v2' \n                        ? `/wp/v2/${postType.rest_base}`\n                        : `/${postType.rest_namespace}/${postType.rest_base}`;\n                    \n                    const queryParams = {\n                        context: 'edit',\n                        per_page: 1,\n                        orderby: 'date',\n                        order: 'desc'\n                    };\n                    \n                    const fullPath = addQueryArgs(apiPath, queryParams);\n\n                    const posts = await apiFetch({\n                        path: fullPath,\n                        parse: true\n                    });\n\n                    if (Array.isArray(posts) && posts.length > 0) {\n                        const samplePost = posts[0];\n                        const metaKeys = Object.keys(samplePost.metadata || samplePost.meta || {});\n\n                        return metaKeys\n                            .filter(metaKey => !EXCLUDED_METADATA_FIELDS.includes(metaKey))\n                            .map(metaKey => ({\n                                label: metaKey,\n                                value: `${postType.slug}:${metaKey}`\n                            }));\n                    }\n                    \n                    return [];\n                } catch (error) {\n                    console.error(`Error fetching metadata for ${postType.slug}:`, error);\n                    return []; // Return empty array on error to continue processing other post types\n                }\n            });\n\n            // Execute all API calls in parallel\n            try {\n                const results = await Promise.all(apiPromises);\n                \n                // Flatten results and add to options set\n                results.flat().forEach(option => {\n                    options.add(option);\n                });\n            } catch (error) {\n                console.error('Error fetching metadata for post types:', error);\n            }\n\n            // Convert Set to Array and sort alphabetically by label\n            const sortedOptions = Array.from(options).sort((a, b) => a.label.localeCompare(b.label));\n            setMetadataOptions(sortedOptions);\n            setIsLoading(false);\n        }\n\n        fetchMetadataForPostTypes();\n    }, [postTypes]);\n\n    // Get the current selected metadata label for display\n    const getSelectedMetadataLabel = () => {\n        if (!selectedMetadata) return '';\n        \n        const found = metadataOptions.find(option => option.value === selectedMetadata);\n        return found ? found.label : selectedMetadata;\n    };\n\n    return (\n        <>\n            <InspectorControls>\n                <PanelBody\n                    title={__('Metadata Filter Settings', 'wordpress-search')}\n                    initialOpen={true}\n                >\n                    {isLoading ? (\n                        <Placeholder>\n                            <Spinner />\n                            {__('Loading metadata fields...', 'wordpress-search')}\n                        </Placeholder>\n                    ) : metadataOptions.length > 0 ? (\n                        <SelectControl\n                            label={__('Select Metadata Field', 'wordpress-search')}\n                            value={selectedMetadata}\n                            options={[\n                                { label: __('Select a field...', 'wordpress-search'), value: '' },\n                                ...metadataOptions\n                            ]}\n                            onChange={(value) => setAttributes({ selectedMetadata: value })}\n                        />\n                    ) : (\n                        <p>\n                            {__('No metadata fields found. Make sure your post types:', 'wordpress-search')}\n                            <ul>\n                                <li>{__('Have custom fields enabled', 'wordpress-search')}</li>\n                                <li>{__('Have REST API support', 'wordpress-search')}</li>\n                                <li>{__('Have at least one post with meta values', 'wordpress-search')}</li>\n                                <li>{__('Have meta fields registered with show_in_rest enabled', 'wordpress-search')}</li>\n                            </ul>\n                        </p>\n                    )}\n                </PanelBody>\n            </InspectorControls>\n            \n            <div className=\"wp-block-wordpress-search-metadata-filter\">\n                {selectedMetadata ? (\n                    <div className=\"metadata-filter-preview\">\n                        {__('Metadata Filter:', 'wordpress-search')} <strong>{getSelectedMetadataLabel()}</strong>\n                    </div>\n                ) : (\n                    <div className=\"metadata-filter-placeholder\">\n                        {__('Select a metadata field in the block settings sidebar →', 'wordpress-search')}\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n","/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\nimport './style.scss';\n\n/**\n * Register the Search Metadata Filter block\n *\n * This block allows users to filter search results by metadata type.\n * It uses dynamic rendering on the PHP side, so the save function\n * returns null while the frontend is handled by render.php.\n */\nregisterBlockType( 'wordpress-search/search-metadata-filter', {\n\tedit: Edit,\n\tsave: () => null,\n} );\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"url\"];","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"index\": 0,\n\t\"./style-index\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkwordpress_search_blocks\"] = globalThis[\"webpackChunkwordpress_search_blocks\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"./style-index\"], () => (__webpack_require__(\"./src/SearchMetadataFilter/index.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["useSelect","useEffect","useState","store","coreStore","SelectControl","Placeholder","Spinner","PanelBody","__","InspectorControls","addQueryArgs","apiFetch","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EXCLUDED_POST_TYPES","EXCLUDED_METADATA_FIELDS","Edit","attributes","setAttributes","selectedMetadata","metadataOptions","setMetadataOptions","isLoading","setIsLoading","postTypes","select","types","getPostTypes","per_page","filteredTypes","filter","type","isExcluded","includes","slug","hasRestSupport","Boolean","rest_base","rest_namespace","hasCustomFields","supports","fetchMetadataForPostTypes","options","Set","apiPromises","map","postType","apiPath","queryParams","context","orderby","order","fullPath","posts","path","parse","Array","isArray","length","samplePost","metaKeys","Object","keys","metadata","meta","metaKey","label","value","error","console","results","Promise","all","flat","forEach","option","add","sortedOptions","from","sort","a","b","localeCompare","getSelectedMetadataLabel","found","find","children","title","initialOpen","onChange","className","registerBlockType","edit","save"],"sourceRoot":""}