{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAC4C;AACa;AACC;AAM3B;AACM;AACsC;AAC7B;AACF;;AAE5C;AAAA;AACA,MAAMoB,mBAAmB,GAAG,CAC3B,YAAY,EACZ,UAAU,EACV,aAAa,EACb,kBAAkB,EAClB,eAAe,EACf,cAAc,EACd,gBAAgB,EAChB,WAAW,EACX,kBAAkB,EAClB,UAAU,EACV,qBAAqB,EACrB,eAAe,EACf,YAAY,EACZ,cAAc,CACd;;AAED;AACA,MAAMC,wBAAwB,GAAG,CAChC,kBAAkB,EAClB,oBAAoB,EACpB,oBAAoB,EACpB,oBAAoB,EACpB,mBAAmB,EACnB,WAAW,EACX,iBAAiB,CACjB;AAEc,SAASC,IAAIA,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,EAAE;EAC3D,MAAM;IAAEC;EAAiB,CAAC,GAAGF,UAAU;EACvC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,4DAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,4DAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAM4B,UAAU,GAAGnB,sEAAa,CAAC;IAChCoB,SAAS,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAM;IAAEC;EAAU,CAAC,GAAGhC,0DAAS,CAAEiC,MAAM,IAAK;IAC3C,MAAMC,KAAK,GAAGD,MAAM,CAAC7B,uDAAS,CAAC,CAAC+B,YAAY,CAAC;MAC5CC,QAAQ,EAAE,CAAC;IACZ,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAGH,KAAK,EAAEI,MAAM,CAAEC,IAAI,IAAK;MAC7C,MAAMC,UAAU,GAAGpB,mBAAmB,CAACqB,QAAQ,CAACF,IAAI,CAACG,IAAI,CAAC;MAC1D,MAAMC,cAAc,GACnBC,OAAO,CAACL,IAAI,CAACM,SAAS,CAAC,IAAID,OAAO,CAACL,IAAI,CAACO,cAAc,CAAC;MACxD,MAAMC,eAAe,GAAGR,IAAI,CAACS,QAAQ,GAAG,eAAe,CAAC,KAAK,IAAI;MAEjE,OAAO,CAACR,UAAU,IAAIG,cAAc,IAAII,eAAe;IACxD,CAAC,CAAC;IAEF,OAAO;MAAEf,SAAS,EAAEK;IAAc,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAENpC,6DAAS,CAAC,MAAM;IACf,eAAegD,yBAAyBA,CAAA,EAAG;MAC1C,IAAI,CAACjB,SAAS,EAAE;QACf;MACD;MAEA,MAAMkB,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAE3B;MACA,MAAMC,WAAW,GAAGpB,SAAS,CAACqB,GAAG,CAAC,MAAOC,QAAQ,IAAK;QACrD,IAAI;UACH;UACA,MAAMC,OAAO,GACZD,QAAQ,CAACR,cAAc,KAAK,OAAO,GAChC,UAAUQ,QAAQ,CAACT,SAAS,EAAE,GAC9B,IAAIS,QAAQ,CAACR,cAAc,IAAIQ,QAAQ,CAACT,SAAS,EAAE;UAEvD,MAAMW,WAAW,GAAG;YACnBC,OAAO,EAAE,MAAM;YACfrB,QAAQ,EAAE,CAAC;YACXsB,OAAO,EAAE,MAAM;YACfC,KAAK,EAAE;UACR,CAAC;UAED,MAAMC,QAAQ,GAAGhD,4DAAY,CAAC2C,OAAO,EAAEC,WAAW,CAAC;UAEnD,MAAMK,KAAK,GAAG,MAAMhD,2DAAQ,CAAC;YAC5BiD,IAAI,EAAEF,QAAQ;YACdG,KAAK,EAAE;UACR,CAAC,CAAC;UAEF,IAAIC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;YAC7C,MAAMC,UAAU,GAAGN,KAAK,CAAC,CAAC,CAAC;YAC3B,MAAMO,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAC3BH,UAAU,CAACI,QAAQ,IAAIJ,UAAU,CAACK,IAAI,IAAI,CAAC,CAC5C,CAAC;YAED,OAAOJ,QAAQ,CACb9B,MAAM,CACLmC,OAAO,IACP,CAACpD,wBAAwB,CAACoB,QAAQ,CAACgC,OAAO,CAC5C,CAAC,CACApB,GAAG,CAAEoB,OAAO,KAAM;cAClBC,KAAK,EAAED,OAAO;cACdE,KAAK,EAAE,GAAGrB,QAAQ,CAACZ,IAAI,IAAI+B,OAAO;YACnC,CAAC,CAAC,CAAC;UACL;UAEA,OAAO,EAAE;QACV,CAAC,CAAC,OAAOG,KAAK,EAAE;UACf;UACA,OAAO,EAAE;QACV;MACD,CAAC,CAAC;;MAEF;MACA,IAAI;QACH,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC3B,WAAW,CAAC;;QAE9C;QACAyB,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,OAAO,CAAEC,MAAM,IAAK;UAClChC,OAAO,CAACiC,GAAG,CAACD,MAAM,CAAC;QACpB,CAAC,CAAC;MACH,CAAC,CAAC,OAAON,KAAK,EAAE;QACf;QACA;MAAA;;MAGD;MACA,MAAMQ,aAAa,GAAGpB,KAAK,CAACqB,IAAI,CAACnC,OAAO,CAAC,CAACoC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACnDD,CAAC,CAACb,KAAK,CAACe,aAAa,CAACD,CAAC,CAACd,KAAK,CAC9B,CAAC;MACD/C,kBAAkB,CAACyD,aAAa,CAAC;MACjCvD,YAAY,CAAC,KAAK,CAAC;IACpB;IAEAoB,yBAAyB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACjB,SAAS,CAAC,CAAC;;EAEf;EACA,MAAM0D,wBAAwB,GAAGA,CAAA,KAAM;IACtC,IAAI,CAACjE,gBAAgB,EAAE;MACtB,OAAO,EAAE;IACV;IAEA,MAAMkE,KAAK,GAAGjE,eAAe,CAACkE,IAAI,CAChCV,MAAM,IAAKA,MAAM,CAACP,KAAK,KAAKlD,gBAC9B,CAAC;IACD,OAAOkE,KAAK,GAAGA,KAAK,CAACjB,KAAK,GAAGjD,gBAAgB;EAC9C,CAAC;EAED,oBACCR,uDAAA,CAAAE,uDAAA;IAAA0E,QAAA,gBACC9E,sDAAA,CAACL,sEAAiB;MAAAmF,QAAA,eACjB5E,uDAAA,CAACT,4DAAS;QACTsF,KAAK,EAAErF,mDAAE,CAAC,0BAA0B,EAAE,kBAAkB,CAAE;QAC1DsF,WAAW,EAAE,IAAK;QAAAF,QAAA,GAEjBjE,SAAS,iBACTX,uDAAA,CAACX,8DAAW;UAAAuF,QAAA,gBACX9E,sDAAA,CAACR,0DAAO,IAAE,CAAC,EACVE,mDAAE,CAAC,0BAA0B,EAAE,kBAAkB,CAAC;QAAA,CACvC,CACb,EAEA,CAACmB,SAAS,IAAIF,eAAe,CAACwC,MAAM,GAAG,CAAC,iBACxCnD,sDAAA,CAACV,gEAAa;UACbqE,KAAK,EAAEjE,mDAAE,CACR,uBAAuB,EACvB,kBACD,CAAE;UACFkE,KAAK,EAAElD,gBAAiB;UACxByB,OAAO,EAAE,CACR;YACCwB,KAAK,EAAEjE,mDAAE,CACR,iBAAiB,EACjB,kBACD,CAAC;YACDkE,KAAK,EAAE;UACR,CAAC,EACD,GAAGjD,eAAe,CACjB;UACFsE,QAAQ,EAAGrB,KAAK,IACfnD,aAAa,CAAC;YAAEC,gBAAgB,EAAEkD;UAAM,CAAC;QACzC,CACD,CACD,EAEA,CAAC/C,SAAS,IAAIF,eAAe,CAACwC,MAAM,KAAK,CAAC,iBAC1CjD,uDAAA;UAAA4E,QAAA,GACEpF,mDAAE,CACF,sDAAsD,EACtD,kBACD,CAAC,eACDQ,uDAAA;YAAA4E,QAAA,gBACC9E,sDAAA;cAAA8E,QAAA,EACEpF,mDAAE,CACF,4BAA4B,EAC5B,kBACD;YAAC,CACE,CAAC,eACLM,sDAAA;cAAA8E,QAAA,EACEpF,mDAAE,CACF,uBAAuB,EACvB,kBACD;YAAC,CACE,CAAC,eACLM,sDAAA;cAAA8E,QAAA,EACEpF,mDAAE,CACF,yCAAyC,EACzC,kBACD;YAAC,CACE,CAAC,eACLM,sDAAA;cAAA8E,QAAA,EACEpF,mDAAE,CACF,uDAAuD,EACvD,kBACD;YAAC,CACE,CAAC;UAAA,CACF,CAAC;QAAA,CACH,CACH;MAAA,CACS;IAAC,CACM,CAAC,eAEpBQ,uDAAA;MAAA,GAASa,UAAU;MAAA+D,QAAA,GACjBjE,SAAS,iBACTX,uDAAA;QAAKc,SAAS,EAAC,yBAAyB;QAAA8D,QAAA,gBACvC9E,sDAAA,CAACR,0DAAO,IAAE,CAAC,EACVE,mDAAE,CAAC,2BAA2B,EAAE,kBAAkB,CAAC;MAAA,CAChD,CACL,EAEA,CAACmB,SAAS,IAAIH,gBAAgB,iBAC9BR,uDAAA;QACCc,SAAS,EAAC,yBAAyB;QACnCkE,KAAK,EAAE;UAAEC,aAAa,EAAE;QAAO,CAAE;QAAAL,QAAA,GAEhCpF,mDAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,GAAG,eAChDM,sDAAA;UAAA8E,QAAA,EAASH,wBAAwB,CAAC;QAAC,CAAS,CAAC;MAAA,CACzC,CACL,EAEA,CAAC9D,SAAS,IAAI,CAACH,gBAAgB,iBAC/BV,sDAAA;QACCgB,SAAS,EAAC,6BAA6B;QACvCkE,KAAK,EAAE;UAAEC,aAAa,EAAE;QAAO,CAAE;QAAAL,QAAA,EAEhCpF,mDAAE,CACF,yDAAyD,EACzD,kBACD;MAAC,CACG,CACL;IAAA,CACG,CAAC;EAAA,CACL,CAAC;AAEL;;;;;;;;;;AC/QA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACA;AACsD;;AAEtD;AACA;AACA;AAC0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA0F,oEAAiB,CAAC,yCAAyC,EAAE;EAC5DC,IAAI,EAAE9E,6CAAI;EACV+E,IAAI,EAAEA,CAAA,KAAM;AACb,CAAC,CAAC,C","sources":["webpack://wordpress-search-blocks/./src/SearchMetadataFilter/edit/index.js","webpack://wordpress-search-blocks/external window [\"wp\",\"apiFetch\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"blockEditor\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"blocks\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"components\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"coreData\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"data\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"element\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"i18n\"]","webpack://wordpress-search-blocks/external window [\"wp\",\"url\"]","webpack://wordpress-search-blocks/external window \"ReactJSXRuntime\"","webpack://wordpress-search-blocks/webpack/bootstrap","webpack://wordpress-search-blocks/webpack/runtime/compat get default export","webpack://wordpress-search-blocks/webpack/runtime/define property getters","webpack://wordpress-search-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://wordpress-search-blocks/webpack/runtime/make namespace object","webpack://wordpress-search-blocks/./src/SearchMetadataFilter/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { store as coreStore } from '@wordpress/core-data';\nimport {\n\tSelectControl,\n\tPlaceholder,\n\tSpinner,\n\tPanelBody,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { InspectorControls, useBlockProps } from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n// List of internal WordPress post types to exclude\nconst EXCLUDED_POST_TYPES = [\n\t'attachment',\n\t'wp_block',\n\t'wp_template',\n\t'wp_template_part',\n\t'wp_navigation',\n\t'wp_font_face',\n\t'wp_font_family',\n\t'menu_item',\n\t'wp_global_styles',\n\t'revision',\n\t'customize_changeset',\n\t'nav_menu_item',\n\t'custom_css',\n\t'oembed_cache',\n];\n\n// List of metadata fields to exclude\nconst EXCLUDED_METADATA_FIELDS = [\n\t'document_file_id',\n\t'document_file_name',\n\t'document_file_size',\n\t'document_file_type',\n\t'document_file_url',\n\t'footnotes',\n\t'show_inpage_nav',\n];\n\nexport default function Edit({ attributes, setAttributes }) {\n\tconst { selectedMetadata } = attributes;\n\tconst [metadataOptions, setMetadataOptions] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\t// Get block props for proper block wrapper handling\n\tconst blockProps = useBlockProps({\n\t\tclassName: 'wp-block-wordpress-search-metadata-filter-editor',\n\t});\n\n\t// Fetch post types with expanded query\n\tconst { postTypes } = useSelect((select) => {\n\t\tconst types = select(coreStore).getPostTypes({\n\t\t\tper_page: -1,\n\t\t});\n\n\t\tconst filteredTypes = types?.filter((type) => {\n\t\t\tconst isExcluded = EXCLUDED_POST_TYPES.includes(type.slug);\n\t\t\tconst hasRestSupport =\n\t\t\t\tBoolean(type.rest_base) && Boolean(type.rest_namespace);\n\t\t\tconst hasCustomFields = type.supports?.['custom-fields'] === true;\n\n\t\t\treturn !isExcluded && hasRestSupport && hasCustomFields;\n\t\t});\n\n\t\treturn { postTypes: filteredTypes };\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function fetchMetadataForPostTypes() {\n\t\t\tif (!postTypes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst options = new Set(); // Use Set to avoid duplicate metadata fields\n\n\t\t\t// Create promises for all post type API calls\n\t\t\tconst apiPromises = postTypes.map(async (postType) => {\n\t\t\t\ttry {\n\t\t\t\t\t// For other post types, use the standard REST API\n\t\t\t\t\tconst apiPath =\n\t\t\t\t\t\tpostType.rest_namespace === 'wp/v2'\n\t\t\t\t\t\t\t? `/wp/v2/${postType.rest_base}`\n\t\t\t\t\t\t\t: `/${postType.rest_namespace}/${postType.rest_base}`;\n\n\t\t\t\t\tconst queryParams = {\n\t\t\t\t\t\tcontext: 'edit',\n\t\t\t\t\t\tper_page: 1,\n\t\t\t\t\t\torderby: 'date',\n\t\t\t\t\t\torder: 'desc',\n\t\t\t\t\t};\n\n\t\t\t\t\tconst fullPath = addQueryArgs(apiPath, queryParams);\n\n\t\t\t\t\tconst posts = await apiFetch({\n\t\t\t\t\t\tpath: fullPath,\n\t\t\t\t\t\tparse: true,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (Array.isArray(posts) && posts.length > 0) {\n\t\t\t\t\t\tconst samplePost = posts[0];\n\t\t\t\t\t\tconst metaKeys = Object.keys(\n\t\t\t\t\t\t\tsamplePost.metadata || samplePost.meta || {}\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn metaKeys\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t(metaKey) =>\n\t\t\t\t\t\t\t\t\t!EXCLUDED_METADATA_FIELDS.includes(metaKey)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.map((metaKey) => ({\n\t\t\t\t\t\t\t\tlabel: metaKey,\n\t\t\t\t\t\t\t\tvalue: `${postType.slug}:${metaKey}`,\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [];\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Silently handle errors and continue with other post types\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Execute all API calls in parallel\n\t\t\ttry {\n\t\t\t\tconst results = await Promise.all(apiPromises);\n\n\t\t\t\t// Flatten results and add to options set\n\t\t\t\tresults.flat().forEach((option) => {\n\t\t\t\t\toptions.add(option);\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\t// If all API calls fail, show empty state\n\t\t\t\t// The UI will display the \"No metadata fields found\" message\n\t\t\t}\n\n\t\t\t// Convert Set to Array and sort alphabetically by label\n\t\t\tconst sortedOptions = Array.from(options).sort((a, b) =>\n\t\t\t\ta.label.localeCompare(b.label)\n\t\t\t);\n\t\t\tsetMetadataOptions(sortedOptions);\n\t\t\tsetIsLoading(false);\n\t\t}\n\n\t\tfetchMetadataForPostTypes();\n\t}, [postTypes]);\n\n\t// Get the current selected metadata label for display\n\tconst getSelectedMetadataLabel = () => {\n\t\tif (!selectedMetadata) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst found = metadataOptions.find(\n\t\t\t(option) => option.value === selectedMetadata\n\t\t);\n\t\treturn found ? found.label : selectedMetadata;\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody\n\t\t\t\t\ttitle={__('Metadata Filter Settings', 'wordpress-search')}\n\t\t\t\t\tinitialOpen={true}\n\t\t\t\t>\n\t\t\t\t\t{isLoading && (\n\t\t\t\t\t\t<Placeholder>\n\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t\t{__('Loading metadata fields…', 'wordpress-search')}\n\t\t\t\t\t\t</Placeholder>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isLoading && metadataOptions.length > 0 && (\n\t\t\t\t\t\t<SelectControl\n\t\t\t\t\t\t\tlabel={__(\n\t\t\t\t\t\t\t\t'Select Metadata Field',\n\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tvalue={selectedMetadata}\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: __(\n\t\t\t\t\t\t\t\t\t\t'Select a field…',\n\t\t\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...metadataOptions,\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tonChange={(value) =>\n\t\t\t\t\t\t\t\tsetAttributes({ selectedMetadata: value })\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!isLoading && metadataOptions.length === 0 && (\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t'No metadata fields found. Make sure your post types:',\n\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t\t\t'Have custom fields enabled',\n\t\t\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t\t\t'Have REST API support',\n\t\t\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t\t\t'Have at least one post with meta values',\n\t\t\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t\t\t'Have meta fields registered with show_in_rest enabled',\n\t\t\t\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\n\t\t\t<div {...blockProps}>\n\t\t\t\t{isLoading && (\n\t\t\t\t\t<div className=\"metadata-filter-loading\">\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t{__('Loading metadata options…', 'wordpress-search')}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{!isLoading && selectedMetadata && (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"metadata-filter-preview\"\n\t\t\t\t\t\tstyle={{ pointerEvents: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{__('Metadata Filter:', 'wordpress-search')}{' '}\n\t\t\t\t\t\t<strong>{getSelectedMetadataLabel()}</strong>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{!isLoading && !selectedMetadata && (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"metadata-filter-placeholder\"\n\t\t\t\t\t\tstyle={{ pointerEvents: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t'Select a metadata field in the block settings sidebar →',\n\t\t\t\t\t\t\t'wordpress-search'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n}\n","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"url\"];","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\n\n/**\n * Register the Search Metadata Filter block\n *\n * This block allows users to filter search results by metadata type.\n * It uses dynamic rendering on the PHP side, so the save function\n * returns null while the frontend is handled by render.php.\n */\nregisterBlockType('wordpress-search/search-metadata-filter', {\n\tedit: Edit,\n\tsave: () => null,\n});\n"],"names":["useSelect","useEffect","useState","store","coreStore","SelectControl","Placeholder","Spinner","PanelBody","__","InspectorControls","useBlockProps","addQueryArgs","apiFetch","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EXCLUDED_POST_TYPES","EXCLUDED_METADATA_FIELDS","Edit","attributes","setAttributes","selectedMetadata","metadataOptions","setMetadataOptions","isLoading","setIsLoading","blockProps","className","postTypes","select","types","getPostTypes","per_page","filteredTypes","filter","type","isExcluded","includes","slug","hasRestSupport","Boolean","rest_base","rest_namespace","hasCustomFields","supports","fetchMetadataForPostTypes","options","Set","apiPromises","map","postType","apiPath","queryParams","context","orderby","order","fullPath","posts","path","parse","Array","isArray","length","samplePost","metaKeys","Object","keys","metadata","meta","metaKey","label","value","error","results","Promise","all","flat","forEach","option","add","sortedOptions","from","sort","a","b","localeCompare","getSelectedMetadataLabel","found","find","children","title","initialOpen","onChange","style","pointerEvents","registerBlockType","edit","save"],"sourceRoot":""}